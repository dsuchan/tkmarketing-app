@use "sass:math";
@import "./breakpoints";

$grid-columns: 12;
$grid-gaps: (
  "0": 0,
  "1": 0.625rem,
  "2": 1.25rem,
  "3": 1.875rem,
);
$layout-values: flex-start, flex-end, center, space-between, space-around;

// base layout classes
.container {
  max-width: 1270px;
  width: 100%;
  box-sizing: border-box;
  margin: 0 auto;
  padding: 0 1.25rem;
  @include md-up {
    padding: 0 2rem;
  }
}
.row {
  display: flex;
  flex-flow: row wrap;
}

// col classes
@include xs-up {
  @for $i from 1 through $grid-columns {
    .col-xs-#{$i} {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}
@include sm-up {
  @for $i from 1 through $grid-columns {
    .col-sm-#{$i} {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}
@include md-up {
  @for $i from 1 through $grid-columns {
    .col-md-#{$i} {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}
@include lg-up {
  @for $i from 1 through $grid-columns {
    .col-lg-#{$i} {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}
@include xl-up {
  @for $i from 1 through $grid-columns {
    .col-xl-#{$i} {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}

// grid gaps
@each $key, $val in $grid-gaps {
  .gap-#{$key} > * {
    padding: $val;
  }
  .gap-#{$key} {
    margin-left: -$val;
    margin-right: -$val;
  }
}

// justify content classes
@each $val in $layout-values {
  .justify-#{$val} {
    justify-content: $val;
  }
}
